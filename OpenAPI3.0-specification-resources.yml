openapi: 3.0.0

servers:
  # Added by API Auto Mocking Plugin
  # - description: SwaggerHub API Auto Mocking
  #   url: https://virtserver.swaggerhub.com/javiervidrua/TWID-SOA-API-resources/1.0.0
  - description: Local server
    url: http://localhost:5000

info:
  description: TWID-SOA API for the resources service.
  version: "1.0.0"
  title: TWID-SOA-API-resources
  contact:
    email: javiervidrua@gmail.com
  license:
    name: MIT
    url: 'https://jvr.mit-license.org/'
tags:
  - name: Board
    description: Everything related to the board
  - name: Cards
    description: Everything related to the cards

paths:
  /board:
    get:
      tags:
        - Board
      summary: Get the resources of the board
      description: Get the resources of the board
      responses:
        '200':
          description: Map resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board'
  /board/round:
    get:
      tags:
        - Board
      summary: Get the round
      description: Get the round
      responses:
        '200':
          description: Round number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-round'
    post:
      tags:
        - Board
      summary: Create a new round (increment the current round number)
      description: Create a new round (increment the current round number)
      responses:
        '200':
          description: Round created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-round'
        '400':
          description: Cannot create any more rounds
    delete:
      tags:
        - Board
      summary: Reset the round to round 1
      description: Reset the round to round 1
      responses:
        '200':
          description: Round reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-round'
  /board/score:
    get:
      tags:
        - Board
      summary: Get the score
      description: Get the score of the players
      responses:
        '200':
          description: Score of the players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/board-score'
  /board/score/{player}:
    get:
      tags:
        - Board
      summary: Get the score of the specified player
      description: Get the score of the specified player
      parameters:
        - in: path # can also be query, header, cookie
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '200':
          description: Score of the specified player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-score-player'
    put:
      tags:
        - Board
      summary: Update the score of the specified player
      description: Update the score of the specified player
      parameters:
        - in: path
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '200':
          description: Score updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-score-player'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/board-score-player'
        description: New score of the specified player
    delete:
      tags:
        - Board
      summary: Reset the score of a player to score 0
      description: Reset the score of a player to score 0
      parameters:
        - in: path
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '200':
          description: Score reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-score-player'
  /board/map:
    get:
      tags:
        - Board
      summary: Get the regions of the map
      description: Get the regions of the map
      responses:
        '200':
          description: Regions of the map
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/board-map'
  /board/map/{region}:
    get:
      tags:
        - Board
      summary: Get the countries of the specified region
      description: Get the countries of the specified region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
      responses:
        '200':
          description: Countries of the specified region
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/board-map-region-country'
    put:
      tags:
        - Board
      summary: Update the countries of the specified region
      description: Update the countries of the specified region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
      responses:
        '200':
          description: Countries of the specified region updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/board-map-region-country'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/board-map-region-country'
        description: New countries of the specified region
  /board/map/{region}/{country}:
    get:
      tags:
        - Board
      summary: Get the specified country of the specified region
      description: Get the specified country of the specified region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
        - in: path
          name: country
          description: Name of the country
          required: true
          schema:
            type: string
            example: Congo
      responses:
        '200':
          description: Specified country of the specified region
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-map-region-country-country'
    put:
      tags:
        - Board
      summary: Update the specified country of the specified region
      description: Update the specified country of the specified region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
        - in: path
          name: country
          description: Name of the country
          required: true
          schema:
            type: string
            example: Congo
      responses:
        '200':
          description: Specified country of the specified region updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-map-region-country-country'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/board-map-region-country-country'
        description: New attributes of the specified country of the specified region
  /board/nwo:
    get:
      tags:
        - Board
      summary: Get the New World Order tracks
      description: Get the New World Order tracks
      responses:
        '200':
          description: New World Order tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-nwo'
  /board/nwo/{track}:
    get:
      tags:
        - Board
      summary: Get the slots of the specified track
      description: Get the slots of the specified track
      parameters:
        - in: path
          name: track
          description: Name of the track
          required: true
          schema:
            type: string
            example: Public opinion
      responses:
        '200':
          description: Slots of the specified track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-nwo-track'
  /board/nwo/{track}/{slot}:
    get:
      tags:
        - Board
      summary: Get the state of the specified slot of the specified track
      description: Get the state of the specified slot of the specified track
      parameters:
        - in: path
          name: track
          description: Name of the track
          required: true
          schema:
            type: string
            example: Public opinion
        - in: path
          name: slot
          description: Name of the slot
          required: true
          schema:
            type: string
            example: State propaganda
      responses:
        '200':
          description: State of the specified slot of the specified track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-nwo-track-slot'
    put:
      tags:
        - Board
      summary: Update the state of the specified slot of the specified track
      description: Update the state of the specified slot of the specified track
      parameters:
        - in: path
          name: track
          description: Name of the track
          required: true
          schema:
            type: string
            example: Public opinion
        - in: path
          name: slot
          description: Name of the slot
          required: true
          schema:
            type: string
            example: State propaganda
      responses:
        '200':
          description: State of the specified slot of the specified track updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-nwo-track-slot'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/board-nwo-track-slot'
        description: New state of the specified slot of the specified track
    delete:
      tags:
        - Board
      summary: Reset the state of the specified slot of the specified track
      description: Reset the state of the specified slot of the specified track
      parameters:
        - in: path
          name: track
          description: Name of the track
          required: true
          schema:
            type: string
            example: Public opinion
        - in: path
          name: slot
          description: Name of the slot
          required: true
          schema:
            type: string
            example: State propaganda
      responses:
        '200':
          description: State of the specified slot of the specified track reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board-nwo-track-slot'
  /cards/{id}:
    get:
      tags:
        - Cards
      summary: Get the details of the card with the specified id
      description: Get the details of the card with the specified id
      parameters:
        - in: path
          name: id
          description: Id of the card
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            example: 23
      responses:
        '200':
          description: Card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cards-id'
  /cards/deck:
    get:
      tags:
        - Cards
      summary: Get the decks of cards
      description: Get the decks of cards
      responses:
        '200':
          description: Decks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cards-deck'
  /cards/deck/{type}:
    get:
      tags:
        - Cards
      summary: Get the cards of the specified deck
      description: Get the cards of the specified deck
      parameters:
        - in: path
          name: type
          description: Type of the deck
          required: true
          schema:
            type: string
        - in: query
          name: random
          description: Specify if return the cards in random order
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cards-deck-type'
    post:
      tags:
        - Cards
      summary: Add the specified card to the specified deck
      description: Add the specified card to the specified deck
      parameters:
        - in: path
          name: type
          description: Type of the deck
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Card added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cards-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cards-deck-type'
        description: Card added
    delete:
      tags:
        - Cards
      summary: Remove the specified card from the specified deck
      description: Remove the specified card from the specified deck
      parameters:
        - in: path
          name: type
          description: Type of the deck
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Card removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cards-id'
  /cards/playing:
    get:
      tags:
        - Cards
      summary: Get the cards that are currently being played
      description: Get the cards that are currently being played
      responses:
        '200':
          description: Cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cards-deck-type'

components:
  schemas:
    board:
      type: array
      items:
        type: object
        required:
          - name
        properties:
          name:
            type: string
      example: [{'name': 'round'}, {'name': 'score'}, {'name': 'map'}, {'name': 'nwo'}]
    board-round:
      type: object
      required:
        - round
      properties:
        round:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
          example: 1
    board-score:
      type: object
      required:
        - name
        - score
      properties:
        name:
          type: string
          example: USA
        score:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 4
    board-score-player:
      type: object
      required:
        - score
      properties:
        score:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 0
    board-map:
      type: object
      required:
        - region
      properties:
        region:
          type: string
          example: Middle east
    board-map-region-country:
      type: object
      required:
        - country
      properties:
        country:
          type: string
          example: Congo
    board-map-region-country-country:
      type: object
      required:
        - stability
        - isConflictive
        - isOilProducer
        - influence
      properties:
        stability:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          example: 2
        isConflictive:
          type: boolean
          example: true
        isOilProducer:
          type: boolean
          example: true
        influence:
          type: array
          items:
            type: object
            required:
              - superPower
              - influence
            properties:
              superPower:
                type: string
                example: USA
              influence:
                type: integer
                format: int32
                minimum: 0
                maximum: 100
                example: 1
    board-nwo:
      type: array
      items:
        type: object
        required:
          - name
        properties:
          name:
            type: string
      example: [{'name': 'Economy'}, {'name': 'Public opinion'}, {'name': 'Technology'}]
    board-nwo-track:
      type: array
      items:
        type: object
        required:
          - name
        properties:
          name:
            type: string
      example: [{'name': 'State propaganda'}, {'name': 'Mass media'}, {'name': 'Information leaks'}]
    board-nwo-track-slot:
      type: object
      required:
        - supremacy
      properties:
        supremacy:
          type: string
          example: 'USA'
    cards-id:
      type: object
      required:
        - id
        - number
        - block
        - era # pre/post 9/11
        - name
        - type
        - text
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          example: 23
        number:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          example: 2
        block:
          type: string
          example: W
        era:
          type: string
          example: Pre
        name:
          type: string
          example: Boris Yeltsin
        type:
          type: string
          example: Political
        text:
          type: string
          example: US gains 1 influence in Russia
    cards-deck:
      type: array
      items:
        type: object
        required:
          - type
        properties:
          type:
            type: string
      example: [{'type': 'main'}, {'type': 'discarded'}, {'type': 'removed'}]
    cards-deck-type:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          example: 1

# # Autogenerated, use as examples
# InventoryItem:
#   type: object
#   required:
#     - id
#     - name
#     - manufacturer
#     - releaseDate
#   properties:
#     id:
#       type: string
#       format: uuid
#       example: d290f1ee-6c54-4b01-90e6-d701748f0851
#     name:
#       type: string
#       example: Widget Adapter
#     releaseDate:
#       type: string
#       format: date-time
#       example: '2016-08-29T09:12:33.001Z'
#     manufacturer:
#       $ref: '#/components/schemas/Manufacturer'
# Manufacturer:
#   required:
#     - name
#   properties:
#     name:
#       type: string
#       example: ACME Corporation
#     homePage:
#       type: string
#       format: url
#       example: 'https://www.acme-corp.com'
#     phone:
#       type: string
#       example: 408-867-5309
#   type: object