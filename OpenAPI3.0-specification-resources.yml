openapi: 3.0.0

servers:
  # Added by API Auto Mocking Plugin
  # - description: SwaggerHub API Auto Mocking
  #   url: https://virtserver.swaggerhub.com/javiervidrua/TWID-SOA-API-master/1.0.0
  - description: Local server
    url: http://localhost:5000

info:
  description: TWID-SOA API for the master service.
  version: "1.0.0"
  title: TWID-SOA-API-master
  contact:
    email: javiervidrua@gmail.com
  license:
    name: MIT
    url: 'https://jvr.mit-license.org/'
tags:
  - name: Map
    description: Everything related to the board, in this case it is called the map

paths:
  /map:
    get:
      tags:
        - Map
      summary: Get the resources of the map
      description: Get the resources of the map
      responses:
        '200':
          description: Map resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/map'
  /map/round:
    get:
      tags:
        - Map
      summary: Get the round
      description: Get the round
      responses:
        '200':
          description: Round number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/map-round'
    put:
      tags:
        - Map
      summary: Update the round
      description: Update the round
      responses:
        '200':
          description: Round updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/map-round'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/map-round'
        description: New round
    delete:
      tags:
        - Map
      summary: Reset the round
      description: Reset the round
      responses:
        '204':
          description: Round reset. No content.
  /map/score:
    get:
      tags:
        - Map
      summary: Get the score
      description: Get the score of the players
      responses:
        '200':
          description: Score of the players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/map-score'
  /map/score/{player}:
    get:
      tags:
        - Map
      summary: Get the score of a player
      description: Get the score of a player
      parameters:
        - in: path # can also be query, header, cookie
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '200':
          description: Score of the specified player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/map-score-player'
    put:
      tags:
        - Map
      summary: Update the score of a player
      description: Update the score of a player
      parameters:
        - in: path
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '200':
          description: Score updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/map-score-player'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/map-score-player'
        description: New score of the player
    delete:
      tags:
        - Map
      summary: Reset the score of a player
      description: Reset the score of a player
      parameters:
        - in: path
          name: player
          description: Name of the player
          required: true
          schema:
            type: string
            example: USA
      responses:
        '204':
          description: Score reset. No content.
  /map/region:
    get:
      tags:
        - Map
      summary: Get the regions of the map
      description: Get the regions of the map
      responses:
        '200':
          description: Regions of the map
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/map-region'
  /map/region/{region}:
    get:
      tags:
        - Map
      summary: Get the countries of a region
      description: Get the countries of a region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
      responses:
        '200':
          description: Countries of the specified region
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/map-region-region'
    put:
      tags:
        - Map
      summary: Update the countries of a region
      description: Update the countries of a region
      parameters:
        - in: path
          name: region
          description: Name of the region
          required: true
          schema:
            type: string
            example: Africa
      responses:
        '200':
          description: Countries of the specified region updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/map-region-region'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/map-region-region'
        description: New countries of the specified region

components:
  schemas:
    map:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Region
    map-round:
      type: object
      required:
        - round
      properties:
        round:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
          example: 4
    map-score:
      type: object
      required:
        - name
        - score
      properties:
        name:
          type: string
          example: USA
        score:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          example: 4
    map-score-player:
      type: object
      required:
        - score
      properties:
        score:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          example: 4
    map-region:
      type: object
      required:
        - region
      properties:
        region:
          type: string
          example: Middle east
    map-region-region:
      type: object
      required:
        - country
      properties:
        country:
          type: string
          example: Congo

    # # Autogenerated, use as examples
    # InventoryItem:
    #   type: object
    #   required:
    #     - id
    #     - name
    #     - manufacturer
    #     - releaseDate
    #   properties:
    #     id:
    #       type: string
    #       format: uuid
    #       example: d290f1ee-6c54-4b01-90e6-d701748f0851
    #     name:
    #       type: string
    #       example: Widget Adapter
    #     releaseDate:
    #       type: string
    #       format: date-time
    #       example: '2016-08-29T09:12:33.001Z'
    #     manufacturer:
    #       $ref: '#/components/schemas/Manufacturer'
    # Manufacturer:
    #   required:
    #     - name
    #   properties:
    #     name:
    #       type: string
    #       example: ACME Corporation
    #     homePage:
    #       type: string
    #       format: url
    #       example: 'https://www.acme-corp.com'
    #     phone:
    #       type: string
    #       example: 408-867-5309
    #   type: object